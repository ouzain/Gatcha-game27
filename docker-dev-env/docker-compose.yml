version: '3.4'

services:

  mango:
    image: mongo
    container_name: player_micro_service_mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db
    expose:
      - 27017
    ports:
      - '27017:27017'
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--quiet",
          "127.0.0.1/admin",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - microservices-net  # Service connected to the custom network


  eureka-server:
    build:
      context: ../eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net  # Service connected to the custom network


  player-service:
    build:
      context: ../player-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=mango # MongoDB connection
    depends_on:
      - mango
      - eureka-server
    networks:
      - microservices-net # Service connected to the custom network


  authentication-service:
    build:
      context: ../authentication-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=mango
    depends_on:
      - mango
      - eureka-server
    networks:
      - microservices-net #


  monster-service:
    build:
      context: ../monster-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - DB_HOST=mango
    depends_on:
      - mango
      - eureka-server
    networks:
      - microservices-net


  invocation-service:
    build:
      context: ../invocation-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - DB_HOST=mango
    depends_on:
      - mango
      - eureka-server
    networks:
      - microservices-net # Service connected to the custom network


  gatcha-frontend:
    build:
      context: ../gatcha-frontend
      dockerfile: Dockerfile
    container_name: gatcha-frontend
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  mongo-data:
